#!/usr/bin/env ruby

$LOAD_PATH.unshift File.expand_path(File.dirname(__FILE__) + '/../lib')
begin
  require 'redis'
rescue LoadError
  require 'rubygems'
  require 'redis'
end
require 'soulheart'
require 'optparse'
require 'tempfile'

@batch_size = 1000
@no_all = false
@no_combinatorial = false
@normalize_regex = false
@normalize_no_sym = false
@remove_results = false

parser = OptionParser.new do |opts|
  opts.banner = 'Usage: soulheart [options] COMMAND'

  opts.separator ''
  opts.separator 'Options:'

  opts.on('-r', '--redis [HOST:PORT]', 'Redis connection string') do |host|
    Soulheart.redis = host
  end

  opts.on('-h', '--help', 'Show this message') do
    puts opts
    exit
  end

  opts.separator ''
  opts.separator '  load options:'

  opts.on('-A', '--no-all', 'Do not add items into the "all" category') do |size|
    @no_all = true
  end

  opts.on('-C', '--no-combinatorial', 'Do not create combined categories, do not add items to combined categories') do |size|
    @no_combinatorial = true
  end

  opts.separator ''
  opts.separator '  normalize options:'

  opts.on('-s', '--with-symbols', 'Do not remove symbols when normalizing terms') do |size|
    @normalize_no_sym = true
  end

  opts.on('-x', '--regex', 'Use the first line from the FILE as the regular expression for normalizing terms') do |size|
    @normalize_regex = true
  end

  opts.separator ''
  opts.separator '  clear options:'

  opts.on('-R', '--remove-results', 'Remove results data - breaks the cache, fully clears all loaded data') do |size|
    @remove_results = true
  end

  opts.separator ''
  opts.separator 'Commands:'
  opts.separator '  load        FILE   Loads data from a FILE - can be a local file or a url. Accepted formats are .json, .tsv and .csv'
  opts.separator "  stop-words  FILE   Load file containing a list of stop words to overwrite defaults - 'the', 'at' and 'vs'"
  opts.separator "  normalize          Set the way that terms are normalized. Requires a file when including the --regex option"
  opts.separator "  clear              Removes existing items and categories from the database"
  opts.separator ''
  opts.separator 'Additional info: https://sethherr.github.io/soulheart/commands/'
  opts.separator ''
end

def open_file(file)
  require 'uri'
  if file =~ URI.regexp
    require 'open-uri'
    open(file)
  elsif File.exist?(file)
    File.open(file)
  else
    raise StandardError, "Couldn't open file: #{file}"
  end
end

def load(file)
  f = open_file(file)
  start_time = Time.now.to_i
  count = 0
  loader = Soulheart::Loader.new({no_all: @no_all, no_combinatorial: @no_combinatorial})
  lines = []
  begin
    if file.match(/(c|t)sv\z/i)
      puts 'Reading a CSV'
      require 'csv'
      sep = file.match(/tsv\z/i) ? "\t" : ','
      CSV.foreach(f, headers: true, col_sep: sep) do |row|
        lines << row.to_hash
        count += 1
      end
    elsif file.match(/json\z/i)
      puts 'Reading JSON'
      puts "Loading items in batches of #{@batch_size} ..."
      until f.eof?
        lines = []
        @batch_size.times do
          break if f.eof?
          lines << JSON.parse(f.gets)
          count += 1
        end
      end
    else
      puts 'unknown File type'
    end
  ensure
    f.close
  end
  loader.load(lines)
  puts "Total time to load:                                  #{Time.now.to_i - start_time} second(s)"
end

def stop_words(file)
  f = open_file(file)
  Soulheart.stop_words = f.readlines.map(&:strip).reject(&:empty?)
end

def normalize(file=nil)
  if @normalize_regex
    f = open_file(file) 
    puts "Updating normalizer: regular expression - " + f.readlines.map(&:strip).reject(&:empty?).first
    Soulheart.normalizer = f.readlines.map(&:strip).reject(&:empty?).first
  elsif @normalize_no_sym
    puts "Updating normalizer: allow symbols"
    Soulheart.normalizer = ''
  else
    puts "Updating normalizer: default settings"    
    Soulheart.normalizer = Soulheart.default_normalizer
  end
end

def clear
  Soulheart::Loader.new.clear(@remove_results)
end

parser.parse!
case ARGV[0]
when 'load'
  load ARGV[1]
when 'stop-words'
  stop_words ARGV[1]
when 'normalize'
  ARGV[1] ? normalize(ARGV[1]) : normalize
when 'clear'
  puts @remove_results ? "Clearing ALL data (-R option)" : "Clearing data"
  clear
  load ARGV[1] if ARGV[1]
else
  puts parser.help
end
